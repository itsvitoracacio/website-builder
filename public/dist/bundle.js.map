{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAO;AACP;AACA;AACA,OAAO,SAAS,EAAE,QAAQ,EAAE,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpeAAe,oCAAoC;AACnD;AACA,qBAAqB,kBAAkB;AACvC,KAAK;AACL,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,kBAAkB;AACpE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,gBAAgB;AACpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1O8D;;AAEvD;AACP;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,0CAA0C,6BAA6B;AACvE,+CAA+C,eAAe;AAC9D;AACA,iDAAiD,mBAAmB;AACpE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kDAAkD,qBAAqB;;AAEvE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,0CAA0C,6BAA6B,GAAG,WAAW;AACrF;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,wEAAkB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,gBAAgB;AACnC,2BAA2B,gBAAgB;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,gBAAgB;AAChD,gCAAgC,gBAAgB,KAAK,iBAAiB;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,gBAAgB;AACvC;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,gBAAgB;;AAE/C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oCAAoC;AACzD;AACA;AACA;AACA,qBAAqB,oCAAoC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;;;;;;;UC/cA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNyD;AACR;;AAEjD;AACA,qBAAqB,mEAAS;AAC9B,qBAAqB,mEAAS;AAC9B,uBAAuB,mEAAS;AAChC;AACA;AACA;;AAEA;AACA,2BAA2B,2DAAa;AACxC;;AAEA;AACA,wBAAwB,mEAAS;AACjC,wBAAwB,mEAAS;AACjC;AACA","sources":["webpack://website-builder/./public/src/js/components/accordion.js","webpack://website-builder/./public/src/js/components/contextMenus.js","webpack://website-builder/./public/src/js/editPage.js","webpack://website-builder/webpack/bootstrap","webpack://website-builder/webpack/runtime/define property getters","webpack://website-builder/webpack/runtime/hasOwnProperty shorthand","webpack://website-builder/webpack/runtime/make namespace object","webpack://website-builder/./public/main.js"],"sourcesContent":["export class Accordion {\n\tconstructor(location, content, elementType) {\n\t\tthis.accordToggle = document.querySelector(\n\t\t\t`.${location}${content}${elementType}Toggle`\n\t\t)\n\t}\n\topenOrClose() {\n\t\t// 'this' is referring to the accordToggle\n\t\tif (this.classList.contains('open')) {\n\t\t\tthis.classList.remove('open')\n\t\t\tthis.parentElement.classList.remove('open')\n\t\t\tthis.classList.add('closed')\n\t\t\tthis.parentElement.classList.add('closed')\n\t\t} else {\n\t\t\tthis.classList.remove('closed')\n\t\t\tthis.parentElement.classList.remove('closed')\n\t\t\tthis.classList.add('open')\n\t\t\tthis.parentElement.classList.add('open')\n\t\t}\n\t}\n}","class ContextMenu {\n\tconstructor(pieceType, endpoint, parentName, selectorName) {\n\t\tthis.pieceType = pieceType\n\t\tthis.endpoint = endpoint\n\t\tthis.parentName = parentName\n\t\tthis.selectorName = selectorName\n\t\tthis.clickEvent = ''\n\t\tthis.contextMenu = document.createElement('div')\n\t}\n\n\tset setClickEvent(clickEvent) {\n\t\tthis.clickEvent = clickEvent\n\t}\n\n\tcreateContextMenu() {\n\t\tconsole.log('Please define setUpContextMenu() on the child class')\n\t}\n\n\topenContextMenu(event) {\n\t\t// Preventing the browser from opening the default window context menu\n\t\tevent.preventDefault()\n\n\t\t// If there's no context menu attached to the click target, do nothing\n\t\tconst contextClicked = event.target.dataset.context\n\t\tif (!contextClicked) return\n\n\t\t// Setting the this.clickEvent property now that a click event happened\n\t\tthis.setClickEvent = event\n\n\t\t// Showing the context menu to the user\n\t\tthis.showContextMenu()\n\t}\n\n\tsetUpContextMenuBtns() {\n\t\tconsole.log('Please set up setUpContextMenuBtns() on the child class')\n\t}\n\n\tdetectClickWhileContextMenuIsOpen() {\n\t\tconst boundCloseContextMenu = this.closeContextMenu.bind(this)\n\t\tdocument.addEventListener('click', boundCloseContextMenu)\n\t}\n\n\tcloseContextMenu() {\n\t\t// Selecting all context menus on the page\n\t\tconst contextMenus = Array.from(document.querySelectorAll('.context-menu'))\n\n\t\t// Determining which one is active, and closing it\n\t\tconst activeCM = contextMenus.find(cm => cm.classList.contains('active'))\n\t\tif (activeCM) {\n\t\t\tactiveCM.classList.remove('active')\n\t\t\tactiveCM.style.top = ''\n\t\t\tactiveCM.style.left = ''\n\t\t}\n\t}\n\n\tshowContextMenu() {\n\t\tthis.closeContextMenu()\n\n\t\tthis.contextMenu.classList.add('active')\n\t\tthis.contextMenu.style.top = this.clickEvent.pageY + 'px'\n\t\tthis.contextMenu.style.left = this.clickEvent.pageX + 'px'\n\t}\n}\n\nclass CustomSelectorContextMenu extends ContextMenu {\n\tconstructor(pieceType, endpoint, parentName, selectorName) {\n\t\tsuper(pieceType, endpoint, parentName, selectorName)\n\t}\n\n\t// Methods from the prototype that need to be modified\n\tcreateContextMenu() {\n\t\tthis.contextMenu.id = 'contextMenuCustomSelector'\n\t\tthis.contextMenu.classList.add('context-menu')\n\t\tthis.contextMenu.dataset.customSelector = this.selectorName\n\n\t\tconst menuList = document.createElement('ul')\n\n\t\tconst deleteOption = document.createElement('li')\n\t\tdeleteOption.id = 'delete-selector'\n\t\tdeleteOption.classList.add('delete')\n\t\tdeleteOption.innerText = 'Delete'\n\n\t\tconst contextMenusArea = document.querySelector('.context-menus')\n\n\t\tmenuList.appendChild(deleteOption)\n\t\tthis.contextMenu.appendChild(menuList)\n\t\tcontextMenusArea.appendChild(this.contextMenu)\n\t}\n\n\tsetUpContextMenuBtns() {\n\t\t// Delete button\n\t\tthis.includeDeleteSelectorBtn()\n\t}\n\n\t// Methods of its own\n\tincludeDeleteSelectorBtn() {\n\t\tconsole.log('Please set up includeDeleteSelectorBtn() on the child class')\n\n\t\t// This needs to be declared on the child classes because of the .bind() method, but on both child classes it will have the exact following code:\n\n\t\t// // const boundCheckBeforeDeleting = this.checkBeforeDeleting.bind(this)\n\t\t// // const deleteSelectorBtn = this.contextMenu.querySelector('#delete-selector')\n\t\t// // deleteSelectorBtn.addEventListener('click', boundCheckBeforeDeleting)\n\t}\n\n\t// Methods needed for includeDeleteSelectorBtn()\n\tcheckBeforeDeleting() {\n\t\tconsole.log('Please set up checkBeforeDeleting() on the child class')\n\n\t\tthis.deleteCustomSelector()\n\t}\n\n\tasync deleteCustomSelector() {\n\t\tconst deleteResponse = await this.sendDeleteRequest()\n\t\tconst selectorToDelete = this.determineSelectorToDelete(deleteResponse)\n\n\t\tthis.removeSelectorContent()\n\t\tthis.stopShowingSelectorAnywhereElse()\n\t\tselectorToDelete.remove() /* removing from the dom */\n\t}\n\n\tasync sendDeleteRequest() {\n\t\ttry {\n\t\t\tconst res = await fetch(this.endpoint, {\n\t\t\t\tmethod: 'DELETE',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tvariantName: `${this.selectorName}`,\n\t\t\t\t}),\n\t\t\t})\n\t\t\tconst data = await res.json()\n\t\t\treturn data\n\t\t} catch (err) {\n\t\t\tconsole.log(err)\n\t\t}\n\t}\n\n\tdetermineSelectorToDelete(remainingVariantsInDb) {\n\t\t// Comparing the current dom selectors to the current db selectors. The one missing should be removed\n\t\tconst selectorArea = document.querySelector(`#${this.siblingsArea}Area`)\n\t\tconst query = '[data-context=CustomSelector]'\n\n\t\tconst domSelectors = Array.from(selectorArea.querySelectorAll(query))\n\t\tconst domSNames = domSelectors.map(domS => domS.dataset.selectorName)\n\n\t\t// Determining which dom selector needs to be removed from the variants area\n\t\tconst nameOfSelectorDeletedFromDb = domSNames.find(\n\t\t\tdomSName => !(domSName in remainingVariantsInDb)\n\t\t)\n\n\t\tconst selectorToDelete = domSelectors.find(\n\t\t\tdomS => domS.dataset.selectorName === nameOfSelectorDeletedFromDb\n\t\t)\n\n\t\treturn selectorToDelete\n\t}\n\n\tstopShowingSelectorAnywhereElse() {\n\t\tconsole.log(\n\t\t\t'Please set up stopShowingSelectorAnywhereElse() on the child class'\n\t\t)\n\t}\n\n\tremoveSelectorContent() {\n\t\tconsole.log('Please set up removeSelectorContent() on the child class')\n\t}\n}\n\nexport class VariantContextMenu extends CustomSelectorContextMenu {\n\tconstructor(pieceType, endpoint, parentName, selectorName) {\n\t\tsuper(pieceType, endpoint, parentName, selectorName)\n\t\tthis.siblingsArea = 'variants'\n\t}\n\n\t// Methods from the prototype that need to be modified\n\tincludeDeleteSelectorBtn() {\n\t\tconst boundCheckBeforeDeleting = this.checkBeforeDeleting.bind(this)\n\t\tconst deleteSelectorBtn = this.contextMenu.querySelector('#delete-selector')\n\n\t\tdeleteSelectorBtn.addEventListener('click', boundCheckBeforeDeleting)\n\t}\n\n\tcheckBeforeDeleting() {\n\t\t// The first variant selector should only be deleted if it's the only one remaining\n\t\tconst isTheFirstVariantSelector = this.parentName === this.selectorName\n\n\t\tconst variantBtns = Array.from(document.querySelectorAll('.variantBtn'))\n\t\tconst isTheOnlyOneRemaining = variantBtns.length === 1\n\n\t\tif (isTheFirstVariantSelector && !isTheOnlyOneRemaining) {\n\t\t\tconsole.log(\"The first variant is only deleted if it's the only one\")\n\t\t\treturn\n\t\t}\n\n\t\tthis.deleteCustomSelector()\n\t}\n\n\tstopShowingSelectorAnywhereElse() {\n\t\t// Both of these methods have a checker inside them to see if they need to run\n\t\tthis.changeColorOfParentSelectorToNoVariants()\n\t\tthis.removeFromLabelsArea()\n\t}\n\n\tremoveSelectorContent() {\n\t\tconsole.log('Please set up removeSelectorContent()')\n\t}\n\n\t// Methods needed for this.stopShowingSelectorAnywhereElse()\n\tchangeColorOfParentSelectorToNoVariants() {\n\t\tconst variantsArea = document.querySelector('#variantsArea')\n\t\tconst variantBtns = Array.from(variantsArea.querySelectorAll('button'))\n\n\t\tconst noVariantsAnymore = variantBtns.length <= 1\n\t\tif (!noVariantsAnymore) return\n\n\t\tconst query = `#${this.parentName}ParentSelector`\n\t\tconst parentSelector = document.querySelector(query)\n\t\tparentSelector.classList.remove('hasSomeVariant')\n\t}\n\n\tremoveFromLabelsArea() {\n\t\tconst selectorFullName = this.clickEvent.target.innerText\n\n\t\tconst variantLabelsArea = document.querySelector('#variantLabelsArea')\n\t\tconst vLabels = Array.from(variantLabelsArea.children)\n\t\tconst vlNames = vLabels.map(vl => vl.innerText)\n\n\t\tconst labelIsShowing = vlNames.find(name => name === selectorFullName)\n\n\t\tif (!labelIsShowing) return\n\n\t\tconst labelToDelete = vLabels.find(l => l.innerText === labelIsShowing)\n\t\tlabelToDelete.remove()\n\t}\n}","import { VariantContextMenu } from './components/contextMenus'\n\nexport class EditPieceType {\n\t//\n\t// When the page is loaded, we create an instance of this EditPieceType class for each piece type on the sidebar, then we add an event listener to render its content when it's clicked.\n\n\t// When one of these buttons are clicked, if it leads to a different section, we need to render that content to the user. So first we show the user where they are now, then we clean any content that's currently where we will place new content, and finally we show the parent selectors belonging to that piece type.\n\n\t// But in order to show the parent selectors on the screen, we first need to get them on our database through a get request to our server.\n\n\tconstructor(pieceType) {\n\t\tthis.pieceType = pieceType\n\t\tthis.endpoint = `/api/pieces/elements/${this.pieceType.toLowerCase()}`\n\t\tthis.btn = document.querySelector(`#editGet${this.pieceType}Btn`)\n\t\tthis.childrenLevel = 'parents'\n\t\tthis.childrenArea = document.querySelector(`#${this.childrenLevel}Area`)\n\t}\n\n\taddEventListenerToRenderContent() {\n\t\tconst boundRenderContent = this.renderContent.bind(this)\n\t\tthis.btn.addEventListener('click', boundRenderContent)\n\t}\n\n\trenderContent(e) {\n\t\tconst isAlreadyBeingShown = e.target.classList.contains('current-place')\n\t\tif (isAlreadyBeingShown) return\n\n\t\tthis.showUserWhereTheyAre()\n\t\tthis.cleanChildrenArea()\n\t\tthis.showContent()\n\t}\n\n\tshowUserWhereTheyAre() {\n\t\tconst siblings = Array.from(this.btn.parentElement.children)\n\t\tsiblings.forEach(sibling => sibling.classList.remove('current-place'))\n\n\t\tthis.btn.classList.add('current-place')\n\t}\n\n\tcleanChildrenArea(childrenAreaIdHandle = this.childrenLevel) {\n\t\tconst childrenArea = document.querySelector(`#${childrenAreaIdHandle}Area`)\n\n\t\twhile (childrenArea.lastChild) {\n\t\t\tchildrenArea.removeChild(childrenArea.lastChild)\n\t\t}\n\t}\n\n\tasync showContent() {\n\t\tdocument.querySelector('#editWorkingAreaH1').innerText = this.pieceType\n\n\t\tconst allParents = await this.sendGetRequest()\n\n\t\tfor (let parentName in allParents) {\n\t\t\tconst parentSelector = new EditParentSelector(\n\t\t\t\tthis.pieceType,\n\t\t\t\t'variants',\n\t\t\t\tparentName\n\t\t\t)\n\n\t\t\tparentSelector.renderSelector(this.childrenArea, allParents[parentName])\n\t\t}\n\t}\n\n\tasync sendGetRequest() {\n\t\ttry {\n\t\t\tconst res = await fetch(this.endpoint, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t})\n\t\t\tconst data = await res.json()\n\t\t\treturn data\n\t\t} catch (err) {\n\t\t\tconsole.log(err)\n\t\t}\n\t}\n}\n\nclass EditSelector extends EditPieceType {\n\t//\n\t// This is an in-between class and it shouldn't be instantiated. It is used strictly to abstract the common components (properties and methods) out of its two child classes.\n\n\tconstructor(pieceType, childrenLevel, parentName) {\n\t\tsuper(pieceType)\n\n\t\tthis.endpoint = `/api/pieces/elements/${this.pieceType.toLowerCase()}/${parentName}`\n\t\tthis.btn = document.createElement('button')\n\t\tthis.childrenLevel = childrenLevel\n\t\tthis.childrenArea = document.querySelector(`#${childrenLevel}Area`)\n\t\tthis.parentName = parentName\n\t}\n\n\trenderSelector(whereOnTheDom) {\n\t\tthis.setUpSelectorBtn()\n\t\tthis.addEventListenerToRenderContent()\n\t\tthis.addSelectorBtnToDom(whereOnTheDom)\n\n\t\tif (this.btn.dataset.context) this.addEventListenerForTheContextMenu()\n\t}\n\n\tsetUpSelectorBtn() {\n\t\tconsole.log('Please set up setUpSelectorBtn() on the child class')\n\t}\n\n\taddSelectorBtnToDom() {\n\t\tconsole.log('Please set up addSelectorBtnToDom() on the child class')\n\t}\n\n\taddEventListenerForTheContextMenu() {\n\t\tconst contextMenu = new VariantContextMenu(\n\t\t\tthis.pieceType,\n\t\t\tthis.endpoint,\n\t\t\tthis.parentName,\n\t\t\tthis.variantName\n\t\t)\n\n\t\tcontextMenu.createContextMenu()\n\t\tcontextMenu.setUpContextMenuBtns()\n\t\tcontextMenu.detectClickWhileContextMenuIsOpen()\n\n\t\tconst boundOpenContextMenu = contextMenu.openContextMenu.bind(contextMenu)\n\t\tthis.btn.addEventListener('contextmenu', boundOpenContextMenu)\n\t}\n\n\tshowContent() {\n\t\tconsole.log('Please set up showContent() on the child class')\n\t}\n}\n\nclass EditParentSelector extends EditSelector {\n\t//\n\t// When the user goes into an EditPieceType page, we load all\n\t// create an instance of this EditPieceType class for each piece type on the sidebar, then we add an event listener to render its content when it's clicked.\n\n\t// When one of these buttons are clicked, if it leads to a different section, we need to render that content to the user. So first we show the user where they are now, then we clean any content that's currently where we will place new content, and finally we show the parent selectors belonging to that piece type.\n\n\t// But in order to show the parent selectors on the screen, we first need to get them on our database through a get request to our server.\n\n\tconstructor(pieceType, childrenLevel, parentName) {\n\t\tsuper(pieceType, childrenLevel, parentName)\n\t}\n\n\t// Methods from the prototype that will be modified\n\trenderSelector(whereOnTheDom, selectorObj) {\n\t\tsuper.renderSelector(whereOnTheDom)\n\n\t\tthis.markSelectorBtnIfCustomized(selectorObj)\n\t}\n\n\tsetUpSelectorBtn() {\n\t\tthis.btn.classList.add('tag-btn')\n\t\tthis.btn.id = `${this.parentName}ParentSelector`\n\t\tthis.btn.innerText = `<${this.parentName}>`\n\t}\n\n\taddSelectorBtnToDom(whereOnTheDom) {\n\t\twhereOnTheDom.appendChild(this.btn)\n\t}\n\n\tcleanChildrenArea() {\n\t\tsuper.cleanChildrenArea() /* this one gets called with the default parameter = this.childrenLevel */\n\t\tsuper.cleanChildrenArea('variantLabels')\n\t\t// We may need to clean more areas here\n\t}\n\n\tasync showContent() {\n\t\tthis.createVariantLineSpan()\n\t\tthis.createAddNewVariantBtn()\n\n\t\tconst allVariants = await this.sendGetRequest()\n\n\t\tfor (let variantName in allVariants) {\n\t\t\tconst variantSelector = new EditVariantSelector(\n\t\t\t\tthis.pieceType,\n\t\t\t\t'cssRules',\n\t\t\t\tthis.parentName,\n\t\t\t\tvariantName\n\t\t\t)\n\n\t\t\tvariantSelector.renderSelector(this.childrenArea)\n\t\t}\n\n\t\tthis.makeVariantsLineVisible()\n\t\tthis.makeEditingAreaVisible()\n\t}\n\n\t// Method needed for this.renderSelector()\n\tmarkSelectorBtnIfCustomized(selectorObj) {\n\t\tconst selectorIsCustomized = Object.keys(selectorObj).length\n\t\tif (selectorIsCustomized) this.btn.classList.add('hasSomeVariant')\n\t}\n\n\t// Methods needed for this.showContent()\n\tcreateVariantLineSpan() {\n\t\tconst variantsLineName = document.createElement('span')\n\t\tvariantsLineName.innerText = 'Variants:'\n\n\t\tthis.childrenArea.appendChild(variantsLineName)\n\t}\n\n\tcreateAddNewVariantBtn() {\n\t\tconst addNewVariant = new EditAddVariantBtn(\n\t\t\tthis.pieceType,\n\t\t\tthis.endpoint,\n\t\t\tthis.parentName,\n\t\t\tthis.childrenArea\n\t\t)\n\n\t\taddNewVariant.setUpForm()\n\t\taddNewVariant.setUpBtn()\n\t\taddNewVariant.setUpChangeBtnOnFocus()\n\t\taddNewVariant.appendBtnToForm()\n\n\t\tthis.childrenArea.appendChild(addNewVariant.newVariantForm)\n\t}\n\n\tmakeVariantsLineVisible() {\n\t\tthis.childrenArea.classList.remove('hidden')\n\t}\n\n\tmakeEditingAreaVisible() {\n\t\tconst editingArea = document.querySelector('#editingArea')\n\t\teditingArea.classList.remove('hidden')\n\t}\n}\n\nclass EditVariantSelector extends EditSelector {\n\tconstructor(pieceType, childrenLevel, parentName, variantName) {\n\t\tsuper(pieceType, childrenLevel, parentName)\n\n\t\tthis.variantName = variantName\n\t}\n\n\tsetUpSelectorBtn() {\n\t\tthis.btn.classList.add('variation-btn')\n\t\tthis.btn.id = `${this.variantName}VariantSelector`\n\t\tthis.btn.classList.add('variantBtn')\n\t\tthis.btn.dataset.context = 'CustomSelector'\n\t\tthis.btn.dataset.selectorName = this.variantName\n\n\t\tthis.btn.innerText =\n\t\t\tthis.variantName === this.parentName\n\t\t\t\t? (this.btn.innerText = `<${this.parentName}>`)\n\t\t\t\t: (this.btn.innerText = `<${this.parentName}> .${this.variantName}`)\n\t}\n\n\taddSelectorBtnToDom(whereOnTheDom) {\n\t\tconst newVariantForm = document.querySelector('#newVariantForm')\n\t\twhereOnTheDom.insertBefore(this.btn, newVariantForm)\n\t\t// create variantRequests instance of specificHttpReqs\n\t\t// add click event listener to enter this variant (showUserWhereTheyAre, cleanChildrenArea, renderCssRules)\n\t}\n\n\tasync showContent() {\n\t\tconsole.log(\n\t\t\t'Please set up the showContent() method for the variant selectors'\n\t\t)\n\t}\n\n\tshowUserWhereTheyAre() {\n\t\tthis.btn.classList.add('current-place')\n\n\t\tconst variantLabel = document.createElement('span')\n\t\tvariantLabel.classList.add('variation-label')\n\t\tvariantLabel.innerText = this.btn.innerText\n\n\t\tvariantLabel.addEventListener('click', e => {\n\t\t\te.target.remove()\n\n\t\t\tthis.btn.classList.remove('current-place')\n\t\t})\n\n\t\tconst variantLabelsArea = document.querySelector('#variantLabelsArea')\n\t\tvariantLabelsArea.appendChild(variantLabel)\n\t}\n}\n\nclass EditAddVariantBtn {\n\tconstructor(pieceType, endpoint, parentName, variantsArea) {\n\t\tthis.pieceType = pieceType\n\t\tthis.endpoint = endpoint\n\t\tthis.parentName = parentName\n\t\tthis.newVariantForm = document.createElement('form')\n\t\tthis.newVariantBtn = document.createElement('input')\n\t\tthis.variantsArea = variantsArea\n\t}\n\n\tsetUpForm() {\n\t\tthis.newVariantForm.autocomplete = 'off'\n\t\tthis.newVariantForm.id = 'newVariantForm'\n\t\tthis.addSubmitEventListenerToAddNewVariant()\n\t}\n\n\tsetUpBtn() {\n\t\tthis.newVariantBtn.type = 'button'\n\t\tthis.newVariantBtn.value = '+'\n\t\tthis.newVariantBtn.id = 'newVariantBtn'\n\t\tthis.newVariantBtn.classList.add('add-variation-btn')\n\t\tthis.newVariantBtn.autocomplete = 'off'\n\t}\n\n\tsetUpChangeBtnOnFocus() {\n\t\t//\n\t\t// Turning btn into input text on click\n\t\tthis.newVariantBtn.addEventListener('focusin', () => {\n\t\t\t//\n\t\t\t// The 1st variant it is automatically created w/ the default parameter: this.parentSelector\n\t\t\t// If it's not the 1st, the user can choose the variant's name\n\n\t\t\tconst isTheFirstVariant = !document\n\t\t\t\t.querySelector(`#${this.parentName}ParentSelector`)\n\t\t\t\t.classList.contains('hasSomeVariant')\n\n\t\t\tif (isTheFirstVariant) this.createVariant()\n\t\t\telse this.changeBtnToInput()\n\t\t})\n\n\t\t// Turning input text back into btn on focusout\n\t\tthis.newVariantBtn.addEventListener('focusout', () => {\n\t\t\tthis.newVariantBtn.type = 'button'\n\t\t\tthis.newVariantBtn.value = '+'\n\t\t})\n\t}\n\n\tchangeBtnToInput() {\n\t\tthis.newVariantBtn.type = 'text'\n\t\tthis.newVariantBtn.value = ''\n\t\tthis.newVariantForm.focus()\n\t\tthis.newVariantBtn.focus()\n\t\tthis.newVariantBtn.select()\n\t}\n\n\taddSubmitEventListenerToAddNewVariant() {\n\t\tthis.newVariantForm.addEventListener('submit', e => {\n\t\t\te.preventDefault()\n\n\t\t\tthis.createVariant(this.newVariantBtn.value)\n\t\t})\n\t}\n\n\tasync createVariant(inputValue = this.parentName) {\n\t\ttry {\n\t\t\tconst res = await fetch(this.endpoint, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tpieceType: this.pieceType,\n\t\t\t\t\tparentName: this.parentName,\n\t\t\t\t\tvariantName: inputValue,\n\t\t\t\t}),\n\t\t\t})\n\t\t\tconst dbVariants = await res.json()\n\t\t\tthis.receivePostResponse(dbVariants)\n\t\t} catch (err) {\n\t\t\tconsole.log(err)\n\t\t}\n\t}\n\n\treceivePostResponse(dbVariants) {\n\t\tconst domVariants = Array.from(document.querySelectorAll('.variantBtn'))\n\t\tconst domVariantsNames = domVariants.map(dv => dv.dataset.selectorName)\n\n\t\tconst dbVariantsNames = Object.keys(dbVariants)\n\t\tconst newName = dbVariantsNames.find(dbv => !domVariantsNames.includes(dbv))\n\n\t\tconst newVariant = new EditVariantSelector(\n\t\t\tthis.pieceType,\n\t\t\t'cssRules',\n\t\t\tthis.parentName,\n\t\t\tnewName\n\t\t)\n\n\t\tnewVariant.renderSelector(this.variantsArea)\n\n\t\tthis.showThatThisParentSelectorNowHasVariants()\n\t\tthis.newVariantBtn.blur()\n\t}\n\n\tshowThatThisParentSelectorNowHasVariants() {\n\t\tconst parentSelectorId = `#${this.parentName}ParentSelector`\n\n\t\tconst parentSelector = document.querySelector(parentSelectorId)\n\t\tparentSelector.classList.add('hasSomeVariant')\n\t}\n\n\tappendBtnToForm() {\n\t\tthis.newVariantForm.appendChild(this.newVariantBtn)\n\t}\n}\n\n// const typographyType = new EditPieceType('Typography')\n// typographyType.addEventListenerToRenderContent()\n\n// Not sure if we need these classes below\n// class HttpReqs {\n// \tconstructor() {}\n// \tasync sendGetRequest(whereToGetIt) {\n// \t\tawait this.sendHttpRequest('GET', whereToGetIt)\n// \t}\n\n// \tasync sendPostRequest(whereToPostIt, whatToPost) {\n// \t\tconsole.log('sending post request')\n// \t\tawait this.sendHttpRequest('POST', whereToPostIt, whatToPost)\n// \t}\n\n// \tasync sendPutRequest(whereToUpdateIt, whatToUpdate) {\n// \t\tawait this.sendHttpRequest('PUT', whereToUpdateIt, whatToUpdate)\n// \t}\n\n// \tasync sendDeleteRequest(whereToDeleteItFrom, whatToDelete) {\n// \t\tawait this.sendHttpRequest('POST', whereToDeleteItFrom, whatToDelete)\n// \t}\n\n// \tasync sendHttpRequest(httpMethod, endpoint, reqBody) {\n// \t\ttry {\n// \t\t\tconst res = await fetch(\n// \t\t\t\tendpoint,\n// \t\t\t\thttpMethod === 'GET'\n// \t\t\t\t\t? {\n// \t\t\t\t\t\t\tmethod: 'GET',\n// \t\t\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n// \t\t\t\t\t  }\n// \t\t\t\t\t: {\n// \t\t\t\t\t\t\tmethod: httpMethod,\n// \t\t\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n// \t\t\t\t\t\t\tbody: JSON.stringify(reqBody),\n// \t\t\t\t\t  }\n// \t\t\t)\n// \t\t\tconst data = await res.json()\n// \t\t\tconsole.log(data)\n// \t\t\treturn data\n// \t\t\t// if (httpMethod === 'POST') receiveHttpPost(data)\n// \t\t\t// if (httpMethod === 'PUT') receiveHttpPut(data)\n// \t\t\t// if (httpMethod === 'DELETE') receiveHttpDelete(data)\n// \t\t} catch (err) {\n// \t\t\tconsole.log(err)\n// \t\t}\n// \t}\n// }\n\n// class EditTypeHttpReqs extends HttpReqs {\n// \tconstructor(pieceType, endpoint) {\n// \t\tsuper()\n// \t\tthis.pieceType = pieceType\n// \t\tthis.endpoint = endpoint\n// \t}\n// \tgetTypeSelectors() {\n// \t\tthis.sendGetRequest(this.endpoint)\n// \t}\n// }\n\n// class EditVariantHttpReqs extends HttpReqs {\n// \tconstructor(pieceType, selector, endpoint) {\n// \t\tsuper()\n// \t\tthis.pieceType = pieceType\n// \t\tthis.selector = selector\n// \t\tthis.endpoint = endpoint\n// \t}\n// \tcreateVariant(variantName) {\n// \t\tconst pieceType = this.pieceType\n// \t\tconst selector = this.selector\n// \t\tthis.sendPutRequest({ pieceType, selector, variantName }, this.endpoint)\n// \t}\n// \treadVariantRules(variantName) {}\n// }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Accordion } from './src/js/components/accordion'\nimport { EditPieceType } from './src/js/editPage'\n\n// Edit > Sidebar toggles\nconst branding = new Accordion('editSidebar', 'Branding', 'List')\nconst elements = new Accordion('editSidebar', 'Elements', 'List')\nconst components = new Accordion('editSidebar', 'Components', 'List')\nbranding.accordToggle.addEventListener('click', branding.openOrClose)\nelements.accordToggle.addEventListener('click', elements.openOrClose)\ncomponents.accordToggle.addEventListener('click', components.openOrClose)\n\n// Edit > Sidebar toggles > Elements\nconst typographyType = new EditPieceType('Typography')\ntypographyType.addEventListenerToRenderContent()\n\n// Edit > Working area toggles\nconst inheritance = new Accordion('editWorkingArea', 'Inherited', 'Rules')\nconst sideEffects = new Accordion('editWorkingArea', 'SideEffects', 'Rules')\ninheritance.accordToggle.addEventListener('click', inheritance.openOrClose)\nsideEffects.accordToggle.addEventListener('click', sideEffects.openOrClose)\n"],"names":[],"sourceRoot":""}